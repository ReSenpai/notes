
mixin section(id, name)
    section.section(id= id)
        header.section__header= name
        article.section__article
            if block
                block 

mixin code(code)
    code.section__code= code
    
mixin p(text)
    p.sectiom__p= text

mixin li(text)
    li.section_li= text
    

+section('variables', 'Переменные')
    +code('var ololo;')
    +p('В javascript "var" - это объявление переменной. Ты говоришь компьютеру, что берешь условный контейнер и называешь его ololo. Можно провести аналогию, что мы собрали коробку и сделали на ней надпись, но еще ничего не положили в нее. Переменные позволяют комьютеру хранить и обрабатывать данные в динамическом режиме. Любой из семи типов данных можно хранить в переменной. Переменные не могут начинатся с числа или иметь пробелы в имени. Все переменные и функции чувствительны к регистру.') 

+section('comment', 'Комментарии')
    +p('// Двойной слеш комментирует строку, все что идет после дабл слеш до конца строки, будет коментарием.')
    +code('var name = 0;  //тут можнт быть твой комментарий')
    +p('Если нужно закоментить какую то часть кода или несколько строчек, удобнее всего использовать вариант коментов с открывающим и закрывающим тегами звездочка слеш. Вообще самый изи варик комменить код, это выделить нужную часть и нажать хоткей "ctrl + /".')
    +code('var name = 0; <br>/*var ololo = 5;<br>name = ololo + name;*/')

+section('dataTypes', 'Типы данных')
    +p('В Javasript 7 различных типов данных:')
    ul.section__ul
        +li('undefined (неопределенный) - именно такой тип данных имеет сейчас наша переменная ololo. Она как кот шредингера, пока мы не откроем коробку и не положим туда что то определенное. Если выполнить математическую операцию над неопределенной переменной, результат будет "NaN", что означает - не число (not a number). Если объеденить строку с неопределенной переменной, то получишь undefined.')
        +li('null')
        +li('boolean (логический - true/false). Логические значения могут быть только одним из двух значение - true или false. Они похожи на маленький on|off переключатель, где true - on, а false - off. Логические значения никогда не записываются в кавычках.')
        +li('string (строка)')
        +li('symbol (символ)')
        +li('number (число)')
        +li('object (объект)')

+section('assignValue', 'Присваивание значения')
    +code('ololo = 5;')
    +p('В JS можно сохранить значение переменной с помощью оператора присваивания "=". В данном случае мы присвоили числовое значени 5 переменной ololo. Писать var тут нет нужды, поскольку мы уже объявили ранее через var, что ololo является переменной.')
    +code('var WhyNot = 10;')
    +p('Мы можем присваивать значение переменной во время создания, на самом деле, чаще всего так и делают.')
    +code('WhyNot = ololo;')
    +p('Мы так же можем менять значение уже существующей переменной и присваивать ей значения других переменных. В данном случае мы взял переменную WhyNot, у которой уже есть значение = 10 и поменяли ей значение на 5, которое было вложено в ololo.')
    +code('var sum = 10 * 2 + 5 - 3 / 1;')
    +p('Мы так же можем помещать в переменную результаты арифметических выражений. В JS выполнение кода всегда идет справа на лево, сверху вниз. Поэтому в данном случае сначала выполняются все арифметические выражения, а потом их результат будет присвоен переменной. Держи это в голове, справа на лево!!')
    +code('var fraction = 5.75;')
    +p('Мы так же можем хранить десятичные числа в переменной. Порой в нашу переменную могут залетать десятичные числа с огромным количеством знаков после запятой, что может приводить к ошибкам округления. Для это существуют специальные функции, которые позволяют округлять числа до целых или оставляют нужное количество цифр после запятой(об этом будет ниже). Арефметические выражение можно так же проводить и с дробями.')